■■■ Spring MVC ■■■
 1. 웹 개발을 위한 MVC 패턴이 적용된 Spring Framework.
     Spring 에서는 DispatcherServlet 이 컨트롤러 역할을 수행하게 된다.

 2. Spring MVC 의 주요 구성 요소
 - DispatcherServlet 
 	: 클라이언트의 요청을 전달받는다.
 	Controller(사용자 정의 컨트롤러)에게 클라이언트의 요청을 전달하고,
 	Controller 가 반환한 결과값은 View 에 전달하여
 	적절한 응답을 생성할 수 있도록 처리한다.
 
  - HandlerMapping 
    : 클라이언트의 요청을 URL을 어떤 Controller 가 처리할 지 결정한다.
  - controller
    : 사용자 정의 Controller 액션처리. 우리가 작성.
  - ModleAndView 
    : View 객체 정보와 결과값이 들어있는 객체.
  - ViewResolver 
    : 요청에 대한 처리 결과를 보여줄 View 를 결정한다.
  - View
    : 요청에 대한 처리 결과룰 보여줄 응답(결과 출력)을 생성한다. 우리가 작성
  - web.xml
    : DispatcherServlet 서블릿 객체 등록. 우리가 작성
  - dispatcher-servlet.xml
    : Controller 객체 등록. 우리가 작성
 
 3. Spring MVC 실행흐름
 
 - 사용자의 요청 발생 → DispatcherServlet 접수
 - DispatcherServlet  → HandlerMapping 에 주소 분석을 요청
 - DispatcherServlet  → 특정 Controller 객체 호출 및 결과 수신
						 결과는 ModelAndView 객체.
 - DispatcherServlet  → ViewResolver 에 View 객체 분석을 요청.
 - DispatcherServlet  → 특정 View 객체에 Model 객체를 넘겨주고
						 처리된 결과 출력.
	※ ModelAndView 객체
	: View 객체 정보와 결과값이 들어있는 객체
						
						
4. Spring MVC 에서 우리가 해야할 일
  - Controller 
    액션 처리를 담당하는 Controller 클래스 설계.
    Annotation 을 사용하거나 Controller 인터페이스를 구현하여 작성.
  
  - View
    결과 출력을 위한 JSP 페이지 작성
  
  - web.xml
    서블릿 주소와 DispatcherServlet 클래스 등록.
  
  - dispatcher-servlet.xml
    우리가 작성한 Controller 객체 등록
    URL 매핑 주소 등록.
    
------------------------------------------------------------------
 ■■■ Spring MVC 프로젝트 관련 실습 (mvcApp01)■■■
 

가장 최근에 저장한 epf 설정 읽어와 적용하기

○ Perspective
: JavaEE

○ 다이나믹 웹 프로젝트 생성
→ STS (Spring Tool shtee) 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
 : mvcApp01

○ 기타 환경 설정
 → 폰트, 줄번호, 편집 포멧, 인코딩 방식 등
 : 기존 환경 설정 파일(epf) import 하는 것으로 대체

○ 톰캣 서버 등록 및 설정
 : Apache-Tomcat 8.5 선택 및 디렉터리 경로 지정
 포트 번호 변몇 및 URIEncording 지정
  (URIEncording="UTF-8" port="8090")

○ web.xml 파일 생성
: 프로젝트명 우클릭 > Java EE Tools > Generate ...

○ Spring MVC 환경 설정을 위한 라이브러리 등록 
 : WebContent > WEB-INF > lib 경로에 등록(복&붙)
  -  경로 1 : C:\s-f-3.0.2-with-docs\spring-framework-3.0.2.RELEASE\dist
(스프링 기본 핵심 jar 경로)
	·파일 1 : org.springframework.aop-3.0.2.RELEASE.jar
	·파일 2 : org.springframework.asm-3.0.2.RELEASE.jar
	·파일 3 : org.springframework.beans-3.0.2.RELEASE.jar
	·파일 4 : org.springframework.context-3.0.2.RELEASE.jar
	·파일 5 : org.springframework.core-3.0.2.RELEASE.jar
	·파일 6 : org.springframework.expression-3.0.2.RELEASE.jar
	·파일 7 : org.springframework.jdbc-3.0.2.RELEASE.jar
	·파일 8 : org.springframework.transaction-3.0.2.RELEASE.jar
	·파일 9 : org.springframework.web.servlet-3.0.2.RELEASE.jar
	·파일 10 : org.springframework.web-3.0.2.RELEASE.jar

  -  경로 2 : C:\s-f-3.0.2-dependencies\org.apache.commons
		\com.springsource.org.apache.commons.logging\1.1.1
	(스프링 추가 의존 jar 경로)
	·파일 11 : com.springsource.org.apache.commons.logging-1.1.1.jar

  -  경로 3 : C:\oraclexe\app\oracle\~~lib
	(오라클 설치 경로)
	·파일 12 :ojdbc6.jar

 -  경로 4 :C:\Downlods\13_JSTL\jakarta-taglibs-standard-1.1.2\jakarta-taglibs-standard-1.1.2
	·파일 13 : jstl.jar
	·파일 14 : standard.jar

○ 물리적 파일 구성
  - HelloConroller.java		→ 사용자 정의 컨트롤러 클래스 
  - Hello.jsp			→ View 페이지
  - dispatcher-servlet.xml	→ 사용자 정의 컨트롤러 등록
				    및 URL 매핑 주소 등록
  - web.xml			→ Spring MVC Framework
				   Front Controller



○ 이 프로젝트의 요청및 실행에 대한 처리 과정

  ① 외부 요청
    http://localhost:8090/mvcApp01/hello.action

    ※ web.xml 관여
       (~.action 요청 → DisoatcherServlet 등록)

  ② DispatcherServlet 요청 접수
    및 사용자 요청 분석
 
	※ dispatcher-servlet.xml
	(/hello.action → xxx.java)
  ③ DispatcherServlet 이 Controller (사용자 정의 Controller) 지정
   → Controller 의 특정 메소드 호출(액션 처리, ModelAndView 반환)
      사용자의 요청에 따른 액션 처리
      결과 데이터가 들어있는 모델 객체 준비
     뷰 정보 반환 
      (JSP 페이지 정보  - 객체가 아닌 View 페이지 이름(경로) 반환)

   ④ 뷰(View) 페이지에서 최종 웹페이지를 작성(동적으로 그려내기)
   → 페이지를 그리는 과정에서 JSP 페이지 내에서
       EL, JSTL 등의 표기 사용 가능.
   ⑤ 최종적으로 그려진 html 문서가 클라이언트의 브라우저로 전달되면서
      응답 완료~!!!
------------------------------------------------------------------
 ■■■ Spring MVC 프로젝트 관련 실습(mvcApp02) ■■■
 

가장 최근에 저장한 epf 설정 읽어와 적용하기

○ Perspective
 : JavaEE
 
○ 다이나믹 웹 프로젝트 생성
 → STS (Spring Tool shtee) 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
 : mvcApp02


○ web.xml 파일 생성 / 라이브러리 등록

 : 윈도우 탐색기 상에서
  샘플 mvcApp00 의 src와 WebContent 디렉터리 
  복사해서 현재 프로젝트에 덮어쓰기



○ 물리적 파일 구성
  - SendController.java		→ 컨트롤러(Controller)객체
  - Send.jsp			→  뷰(View) 객체
  - ReceiveController.java	→ 컨트롤러(Controller)객체
  - Receive.jsp			→  뷰(View) 객체

  - dispatcher-servlet.xml	→ 사용자 정의 컨트롤러 등록
				    및 URL 매핑 주소 등록
  - web.xml			→ Spring MVC Framework
				   Front Controller

○ 사용자 최초 요청 주소
    http://localhost:8090/mvcApp02/send.action
