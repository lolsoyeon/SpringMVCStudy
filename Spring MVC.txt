■■■ Spring MVC ■■■
 1. 웹 개발을 위한 MVC 패턴이 적용된 Spring Framework.
     Spring 에서는 DispatcherServlet 이 컨트롤러 역할을 수행하게 된다.

 2. Spring MVC 의 주요 구성 요소
 - DispatcherServlet 
 	: 클라이언트의 요청을 전달받는다.
 	Controller(사용자 정의 컨트롤러)에게 클라이언트의 요청을 전달하고,
 	Controller 가 반환한 결과값은 View 에 전달하여
 	적절한 응답을 생성할 수 있도록 처리한다.
 
  - HandlerMapping 
    : 클라이언트의 요청을 URL을 어떤 Controller 가 처리할 지 결정한다.
  - controller
    : 사용자 정의 Controller 액션처리. 우리가 작성.
  - ModleAndView 
    : View 객체 정보와 결과값이 들어있는 객체.
  - ViewResolver 
    : 요청에 대한 처리 결과를 보여줄 View 를 결정한다.
  - View
    : 요청에 대한 처리 결과룰 보여줄 응답(결과 출력)을 생성한다. 우리가 작성
  - web.xml
    : DispatcherServlet 서블릿 객체 등록. 우리가 작성
  - dispatcher-servlet.xml
    : Controller 객체 등록. 우리가 작성
 
 3. Spring MVC 실행흐름
 
 - 사용자의 요청 발생 → DispatcherServlet 접수
 - DispatcherServlet  → HandlerMapping 에 주소 분석을 요청
 - DispatcherServlet  → 특정 Controller 객체 호출 및 결과 수신
						 결과는 ModelAndView 객체.
 - DispatcherServlet  → ViewResolver 에 View 객체 분석을 요청.
 - DispatcherServlet  → 특정 View 객체에 Model 객체를 넘겨주고
						 처리된 결과 출력.
	※ ModelAndView 객체
	   : View 객체 정보와 결과값이 들어있는 객체
						
						
4. Spring MVC 에서 우리가 해야할 일
  - Controller 
    액션 처리를 담당하는 Controller 클래스 설계.
    Annotation 을 사용하거나 Controller 인터페이스를 구현하여 작성.
  
  - View
    결과 출력을 위한 JSP 페이지 작성
  
  - web.xml
    서블릿 주소와 DispatcherServlet 클래스 등록.
  
  - dispatcher-servlet.xml
    우리가 작성한 Controller 객체 등록
    URL 매핑 주소 등록.
    
---------------------------------------------------------------------------
 ■■■ Spring MVC 프로젝트 관련 실습 ■■■
 

가장 최근에 저장한 epf 설정 읽어와 적용하기

○ Perspective
: JavaEE

○ 다이나믹 웹 프로젝트 생성
→ STS (Spring Tool shtee) 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
 : mvcApp01

○ 기타 환경 설정
 → 폰트, 줄번호, 편집 포멧, 인코딩 방식 등
 : 기존 환경 설정 파일(epf) import 하는 것으로 대체

○ 톰캣 서버 등록 및 설정
 : Apache-Tomcat 8.5 선택 및 디렉터리 경로 지정
 포트 번호 변경 및 URIEncording 지정
  (URIEncording="UTF-8" port="8090")

○ web.xml 파일 생성
: 프로젝트명 우클릭 > Java EE Tools > Generate ...

○ Spring MVC 환경 설정을 위한 라이브러리 등록 
 : WebContent > WEB-INF > lib 경로에 등록(복&붙)
  -  경로 1 : C:\s-f-3.0.2-with-docs\spring-framework-3.0.2.RELEASE\dist
(스프링 기본 핵심 jar 경로)
	·파일 1 : org.springframework.aop-3.0.2.RELEASE.jar
	·파일 2 : org.springframework.asm-3.0.2.RELEASE.jar
	·파일 3 : org.springframework.beans-3.0.2.RELEASE.jar
	·파일 4 : org.springframework.context-3.0.2.RELEASE.jar
	·파일 5 : org.springframework.core-3.0.2.RELEASE.jar
	·파일 6 : org.springframework.expression-3.0.2.RELEASE.jar
	·파일 7 : org.springframework.jdbc-3.0.2.RELEASE.jar
	·파일 8 : org.springframework.transaction-3.0.2.RELEASE.jar
	·파일 9 : org.springframework.web.servlet-3.0.2.RELEASE.jar
	·파일 10 : org.springframework.web-3.0.2.RELEASE.jar

  -  경로 2 : C:\s-f-3.0.2-dependencies\org.apache.commons
		\com.springsource.org.apache.commons.logging\1.1.1
	(스프링 추가 의존 jar 경로)
	·파일 11 : com.springsource.org.apache.commons.logging-1.1.1.jar

  -  경로 3 : C:\oraclexe\app\oracle\~~lib
	(오라클 설치 경로)
	·파일 12 :ojdbc6.jar

 -  경로 4 :C:\Downlods\13_JSTL\jakarta-taglibs-standard-1.1.2\jakarta-taglibs-standard-1.1.2
	·파일 13 : jstl.jar
	·파일 14 : standard.jar

○ 물리적 파일 구성
  - HelloConroller.java		→ 사용자 정의 컨트롤러 클래스 
  - Hello.jsp			→ View 페이지
  - dispatcher-servlet.xml	→ 사용자 정의 컨트롤러 등록
				    및 URL 매핑 주소 등록
  - web.xml			→ Spring MVC Framework
				   Front Controller



○ 이 프로젝트의 요청및 실행에 대한 처리 과정

 ① 외부 요청
	http://localhost:8090/mvcApp01/hello.action

	※ web.xml 관여
	(~.action 요청 → DisoatcherServlet 등록)
 ② DispatcherServlet 요청 접수
    및 사용자 요청 분석
 
	※ dispatcher-servlet.xml
	(/hello.action → xxx.java)
 ③ DispatcherServlet 이 Controller (사용자 정의 Controller) 지정
  → Controller 의 특정 메소드 호출(액션 처리, ModelAndView 반환)
     사용자의 요청에 따른 액션 처리
     결과 데이터가 들어있는 모델 객체 준비
     뷰 정보 반환 
     (JSP 페이지 정보  - 객체가 아닌 View 페이지 이름(경로) 반환)

④ 뷰(View) 페이지에서 최종 웹페이지를 작성(동적으로 그려내기)
  → 페이지를 그리는 과정에서 JSP 페이지 내에서
      EL, JSTL 등의 표기 사용 가능.
⑤ 최종적으로 그려진 html 문서가 클라이언트의 브라우저로 전달되면서
   응답 완료~!!!
---------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 관련 실습 (mvcApp02) ■■■

※ 가장 최근에 저장한 epf 설정 읽어와 적용하기

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp02

○ web.xml 파일 생성 / 라이브러리 등록
   : 윈도우 탐색기 상에서
     샘플 프로젝트(mvcApp00)의 src 와 WebContent 디렉터리
     복사해서 현재 프로젝트에 덮어쓰기
    
○ 물리적 파일 구성
   - SendController.java	→ 컨트롤러(Controller) 객체
   - Send.jsp			→ 뷰(View) 객체
   - ReceiveController.java	→ 컨트롤러(Controller) 객체
   - Receive.jsp		→ 뷰(View) 객체

   - dispatcher-servlet.xml	→ 사용자 정의 컨트롤러 등록
				   및 URL 매핑 주소 등록
   - web.xml			→ Spring MVC Framework
				   Front Controller

○ 사용자 최초 요청 주소
   http://localhost:8090/mvcApp02/send.action

------------------------------------------------------------------

■■■ Spring MVC 프로젝트 관련 실습 (mvcApp03) ■■■
2022-11-14
※ 가장 최근에 저장한 epf 설정 읽어와 적용하기

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp03

○ web.xml 파일 생성 / 라이브러리 등록
   : 윈도우 탐색기 상에서
     샘플 프로젝트(mvcApp00)의 src 와 WebContent 디렉터리
     복사해서 현재 프로젝트에 덮어쓰기
    
○ 실습 성격
  : 데이터 송수신 실습(Spring MVC 버전)
    JDBC 모듈 추가 실습
    SimpleDriverDataSource 활용

○ 기능 구현
  : 사용자로부터 이름, 전화번호 데이터를 입력받아
    입력받은 내용을 데이터베이스에 저장.
    이름, 전화번호 항목을 데이터베이스로 부터 읽어
    화면에 출력하여 전달.

○ 사전 작업
  - TBL_MEMBERLIST 데이블 생성 및 활용
  - MEMBERLISTSEQ 시퀀스 생성 및 활용
  - 샘플 데이터 입력 및 활용

○  화면 구성
   이름 [          ] 		→ <input type="text">
   전화 [          ] 		→ <input type="text">
   <회원 추가>			→ <button type="button">

   전체 인원 수  : 2 명  	→ <p>...<p>
 ------------------------------	→ <table> 혹은 <div>
   번호 이름    전화번호
    1   정영준  010-1111-1111
    2   조현하  010-2222-2222
 ------------------------------


○ 물리적 파일 구성
   - mvcApp03_scott.sql 	→ 데이터베이스 관련 객체 준비.
   - MemberDTO.java			→ 사용자 정의 자료형 객체 활용.
   - IMemberDAO.java 		→ 인터페이스 (구멍)
   - MemberDAO.java			→ 데이터베이스 액션 처리 전용 객체.
				   ※ Connection  객체에 대한 의존성 주입 준비.
					→ setter 활용.

  - MemberListController.java	→ 사용자 정의 컨트롤러 객체 활용.
 				   리스트 출력 액션 처리.
				   ※ DAO 객체에 대한 의존성 주입 준비.
					→ setter 활용.

  - MemberList.jsp		→ 회원 명단 출력 뷰(View)
				   회원 데이터 추가 폼에 대한
				   레이아웃(화면) 구성

  - MemberInsertController.java → 사용자 정의 컨트롤러 객체 활용.
				   회원 데이터 추가 액션 처리.
				   ※ DAO 객체에 대한 의존성 주입 준비.
					→ setter 활용.

  - dispatcher-servlet.xml 	→ 사용자 정의 컨트롤러 객체 등록.
				   사용자 요청 URL 매핑 주소 등록.
			  	   SimpleDriverDataSource 객체 등록.
				   의존 객체 주입 설정.
				   DAO 객체 등록.

  - web.xml			→ Spring MVC Framework
				   Front Controller
				   DispatcherServlet 객체 등록
				   WebContent > WEB-INF

○ 사용자 최초 요청 주소
   http://localhost:8090/mvcApp03/memberlist.action


가이드라인 - 시간을 효율적으로 활용
		정책 확정 (잦은 소통)
		
------------------------------------------------------------------

■■■ Spring MVC 프로젝트 관련 실습 (mvcApp04) ■■■
2022-11-15
※ 가장 최근에 저장한 epf 설정 읽어와 적용하기

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp04

○ web.xml 파일 생성 / 라이브러리 등록
   : 윈도우 탐색기 상에서
     샘플 프로젝트(mvcApp00)의 src 와 WebContent 디렉터리
     복사해서 현재 프로젝트에 덮어쓰기
    
○ 실습 성격
  : 직원 관리 프로그램(Spring MVC 버전)
    JDBC 모듈 추가 실습
    SimpleDriverDataSource 활용		
		
○ 기능 구현
   - 직원 데이터 입력, 출력, 수정, 삭제 기능 구현.
   - 지역 데이터 입력, 출력, 수정, 삭제 기능 구현.
   - 부서 데이터 입력, 출력, 수정, 삭제 기능 구현.
   - 직위 데이터 입력, 출력, 수정, 삭제 기능 구현.
   - 로그인 및 로그아웃 기능 구현
     → 관리자 및 일반직원 로그인 구분하여 처리
   ==> Spring MVC, JSP/Servlet, HTML, CSS, Javascript, AJAX
       , jQuery, EL, JSTL 표현 등 활용.

○ 사전 작업   
   - 주요 테이블 생성 및 준비
     ·EMPLOYEE      직원
     ·REGION        지역
     ·DEPARTMENT    부서
     ·POSITION      직위
   - 주요 시퀀스 생성 및 활용
     ·EMPLYEESEQ
     ·REGIONSEQ
     ·DEPARTMENTSEQ
     ·POSITIONSEQ
   - 샘플 데이터 입력 및 확용		
		
		
○ 물리적 파일 구성
  - #00. mvcApp04_scott.sql        → 데이터베이스 관련 객체 준비

  - #01. Employee.java            → DTO 개념. 직원 정보 자료형 클래스 활용.
  - #02. Department.java          → DTO 개념. 부서 정보 자료형 클래스 활용.
  - #03. Region.java              → DTO 개념. 지역 정보 자료형 클래스 활용.
  - #04. Position.java            → DTO 개념. 직위 정보 자료형 클래스 활용.

  - #05. IEmployeeDAO.java            → 인터페이스.
  - #06. IDepartmentDAO.java          → 인터페이스.
  - #07. IRegionDAO.java              → 인터페이스.
  - #08. IPositionDAO.java            → 인터페이스.

  - #09. EmployeeDAO.java           → 데이터베이스 액션 처리 클래스.
		                             직원 데이터 입력, 출력, 수정, 삭제.
		                             Connection 객체에 대한 의존성 주입을 위한 준비.
		                             (인터페이스 자료형 / setter 구성)
  - #10. DepartmentDAO.java         → 데이터베이스 액션 처리 클래스.
		                             부서 데이터 입력, 출력, 수정, 삭제.
		                             Connection 객체에 대한 의존성 주입을 위한 준비.
		                             → 인터페이스 형태의 속성 구성(DataSource)
					     → setter 메소드 정의.
  - #11. RegionDAO.java                → 데이터베이스 액션 처리 클래스.
		                             지역 데이터 입력, 출력, 수정, 삭제.
		                             Connection 객체에 대한 의존성 주입을 위한 준비.
		                             (인터페이스 자료형 / setter 구성)
  - #12. PositionDAO.java              → 데이터베이스 액션 처리 클래스.
		                             직위 데이터 입력, 출력, 수정, 삭제.
		                             Connection 객체에 대한 의존성 주입을 위한 준비.
		                             (인터페이스 자료형 / setter 구성)	

  - #13. EmployeeMenu.jsp		→ 메인 메뉴를 제공하는 뷰(View) 페이지.
					   로그인 후 접근 페이지이기 때문에                     
					   로그아웃에 대한 처리 가능한 컨트롤 구성.


  - #14. EmployeeList.jsp		→ 직원 정보 출력 뷰(View) 페이지.
  - #14-1. munuStyle.css		→ 메뉴 스타일 구성.
  - #14-2. mainStyle.css		→ 메인 스타일 구성.


  - #15. EmployeeListController.java    

  - #16. web.xml
  - #17. dispatcher-servlet.xml

  - #18. applicationContext.xml

직원추가버튼
  - #19. EmployeeInsertFormController.java 
  - #20. EmployeeInsertForm.jsp 

  - #21. AjaxController.java
  - #22. Ajax.jsp

  - #23. EmployeeInsertColtroller.java      	-Employeelist 컨트롤러 요청하기


------------------------------------------------
  - #24. EmployeeUpdateFormController_1.java    내가 구성해본것과 비교해보기~!
  - #25. EmployeeUpdateFrom_1.jsp
  - #26. EmployeeUpdateController_1.java		
------------------------------------------------

  - #24. EmployeeUpdateFormController.java
  - #25. EmployeeUpdateFrom.jsp
  - #26. EmployeeUpdateController.java		-Employeelist 컨트롤러 요청하기dsdsd


  - #27. EmployeeDeleteController.java  	-Employeelist 컨트롤러 요청하기

  
  - #28. LoginFormController.java
  - #29. LoginForm.jsp

  - #30. LoginController.java

  - #31. LogoutController.java


  - #32. EmpListController.java

  - #33. EmpList.jsp

지역
  - #34. RegionListController.java

  - #35. RegionList.jsp


  - #36. RegionInsertFormController.java
  - #37. RegionInsertForm.jsp

  - #38. RegionAjaxController.java
  - #39. RegionAjax.jsp

  - #40. RegionInsertController.java


- #63. RegionUpdateFormController.java
- #64. RegionUpdateForm.jsp 
- #65. RegionUpdateController.java


- #66.RegionDeleteController.java

직위
  - #41. PositionListController.java

  - #42. PositionList.jsp

  - #43. PositionInsertFormController.java

  - #44. PositionInsertForm.jsp 

  - #45.PositionInsertController.java

  - #46.PositionAjaxController.java


  - #55. PositionUpdateFormController.java
  - #56. PositionUpdateForm.jsp 
  - #57. PositionUpdateController.java	


부서
  - #48.DepartmentListController.java

  - #49.DepartmentList.jsp 

  - #50.DepartmentInsertFormController.java

  - #51.DepartmentInsertForm.jsp

  - #52.DepartmentInsertController.java

  - #53.DepartmentAjaxController.java

 + DepartmentAjax.jsp


  - #58. PositionDeleteController.java

  - #59. DepartmentUpdateFormController.java
  - #60. DepartmentUpdateForm.jsp 
  - #61. DepartmentUpdateController.java

  - #62. DepartmentDeleteController.java



  - #67. RegListController.java
  - #68. RegList.jsp

  - #69. DepListController.java
  - #70. DepList.jsp


  - #71. PosListController.java
  - #72. PosList.jsp


○ 사용자 최초 요청 주소
   htttp://localhost:8090/mvcApp04/employeelist.action
   
------------------------------------------------------------------
■■■ Spring MVC 프로젝트 과제 05 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   : mvcApp05

○ 기본 환경 구성 및 라이브러리 생성
   : mvcApp00 (우리가 임의로 만들어둔 샘플)로부터
     src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
   : 성적 관리 프로그램 (Spring MVC 버전)
     JDBC 모듈 추가 활용
     SimpleDriverDataSource 클래스(객체) 활용
     (→ JDBC Driver 조금 더 쉽게 사용할 수 있게 해줌)
     (   스프링에서 제공해주는 거!)

○ 기능 구현
   - 학생 데이터 출력, 입력, 삭제, 수정 기능 구현
   - 학생 데이터 출력, 입력, 삭제, 수정 기능 구현
   - 로그인 / 로그아웃 기능 구현
     → 관리자 및 일반 직원 로그인 구분 grade = 0 => 관리자  grade = 1=> 학생
   ==> Spring MVC, JSP/Servlet, Oracle, HTML/CSS/Javascript, AJAX
       , jQuery, EL, JSTL 표현 등 사용

○ 사전 작업 → 테이블 및 시퀀스, 주요 쿼리문 구성
   - MEMBERLIST 		학생
   - MEMBERRECORD		성적
   - 
○ 물리적 파일 구성 
   
  - #00. mvcApp05_scott.sql        → 데이터베이스 관련 객체 준비

  - #01. Employee.java            → DTO 개념. 직원 정보 자료형 클래스 활용.











---------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 관련 실습 (mvcApp06) ■■■ 2022-11-29
	- Annotation 표기법으로 작성
○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp06


○ web.xml 파일 생성 / 라이브러리 등록
   : 윈도우 탐색기 상에서
     샘플 프로젝트(mvcApp00)의 src 와 WebContent 디렉터리
     복사해서 현재 프로젝트에 덮어쓰기

○ 실습 성격
   : Annotation 표기법을 활용하여 샘플 기본 기능 구성.


○ 기능 구현
   - 페이지 요청 및 응답(mvc)

○ 물리적 파일 구성 
   
  - #01. web.xml         	→ DispatcherServlet 객체 등록
				  (Front Controller )
				   URL 매핑 주소 등록.
				   필터 적용

  - #02. dispatcher-servlet.xml  → 『<context:component-scan>』
				     엘리먼트 등록.

  - #03. HelloController.java	 → 사용자 정의 컨트롤러(Controller)
				    『@Controller』, 『@RequestMapping』
				     어노테이션 등록 및 사용.

  - #04. Hello.jsp		 → 사용자 정의 뷰(View).
  - #05. hello.action		 → 서블릿 주소 연결(요청)용 빈 페이지 


○ 사용자 최초 요청 주소
   htttp://localhost:8090/mvcApp06/hello.action


---------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 관련 실습 (mvcApp07) ■■■
	- Annotation 표기법으로 작성
○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp07


○ web.xml 파일 생성 / 라이브러리 등록
   : 윈도우 탐색기 상에서
     샘플 프로젝트(mvcApp00)의 src 와 WebContent 디렉터리
     복사해서 현재 프로젝트에 덮어쓰기

○ 실습 성격
   : Annotation 표기법을 활용하여 폼 데이터 전송 및 수신.


○ 기능 구현
   - 폼 데이터 전송 및 수신(mvc annotation)
   - 데이터베이스 연결 및 데이터 저장


○ 사전 작업
  - TBL_MEMBERLIST 테이블 구성.
  - 샘플 데이터 활용.
  - 주요 쿼리문 구성.


○ 물리적 파일 구성 
   
  - #00. mvcApp07_scott.sql      

  - #01. web.xml         	→ DispatcherServlet 객체 등록
				  (Front Controller )
				   URL 매핑 주소 등록.
				   필터 적용

  - #02. dispatcher-servlet.xml  → 『<context:component-scan>』
				     엘리먼트 등록.

  - #03. DBConn.java
  - #04. MemberDTO.java
  - #05. MemberDAO.java

  - #06. MemberInsertForm.jsp
  - #07. MemberInsert.jsp
  - #08. MemberList.jsp

  - #09. MemberRecoredController.java  → 사용자 정의 컨트롤러(Controller)
					『@Controller』, 『@RequestMapping』
					어노테이션 등록 및 사용
  - #10. memberlist.action       	→ 서블릿 주소 연결(요청)용 빈 페이지 


○ 사용자 최초 요청 주소
   htttp://localhost:8090/mvcApp07/memberlist.action